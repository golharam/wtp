
CFLAGS = -g -O2 -march=nocona -pipe -ffast-math
BIN=.
TARGETS = $(BIN)/map $(BIN)/mapreads $(BIN)/remduphits $(BIN)/merge_map \
	$(BIN)/pairing

ifndef PREFIX
  PREFIX=/share/apps/corona
endif
ifndef DESTDIR
  DESTDIR=
endif

.PHONY: all install install_targets install_schemas

all : $(TARGETS)

install: install_targets install_schemas

install_targets: $(TARGETS)
	install -d -m 775 ${DESTDIR}${PREFIX}/bin
	install -m 775 $? ${DESTDIR}${PREFIX}/bin/
#install -m 664 templates ${DESTDIR}${PREFIX}/conf/templates
#install -m 664 templates ${DESTDIR}${PREFIX}/bin/templates

install_schemas: $(wildcard schemas/schema_*)
	install -d -m 775 ${DESTDIR}${PREFIX}/etc/schemas/
	install -m 444 $? ${DESTDIR}${PREFIX}/etc/schemas/


clean: 
	-rm -f *.o
	-rm -f $(TARGETS)


LFS_CFLAGS    := $(shell getconf LFS_CFLAGS 2>/dev/null) -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
LFS_LDFLAGS   := $(shell getconf LFS_LDFLAGS 2>/dev/null)
LFS_LIBS      := $(shell getconf LFS_LIBS 2>/dev/null)

# _LARGEFILE_SOURCE gets you O_LARGEFILE for open, and fseeko and ftello
# interfaces.
# _LARGEFILE64_SOURCE gets you the xxx64() versions of calls that take
# off64_t, etc., arguments.
# _FILE_OFFSET_BITS=64 makes off_t, etc., be 64 bits.

CFLAGS        += $(LFS_CFLAGS)
LDFLAGS       = $(LFS_LDFLAGS)
LDLIBS        = $(LFS_LIBS)

CXXFLAGS=$(CFLAGS)

$(BIN)/add_reads: src/add_reads.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/add_reads.cxx zutil.o util.o -o $(BIN)/add_reads

$(BIN)/merge_map: src/merge_map.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/merge_map.cxx zutil.o util.o -o $(BIN)/merge_map

$(BIN)/merge_pat : src/merge_pat.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/merge_pat.cxx zutil.o util.o -o $(BIN)/merge_pat

$(BIN)/comp_dbSNP: src/comp_dbSNP.cxx
	$(CXX) $(CFLAGS) src/comp_dbSNP.cxx -o $(BIN)/comp_dbSNP

$(BIN)/denovoadp: src/denovoadp.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/denovoadp.cxx zutil.o util.o -o $(BIN)/denovoadp

$(BIN)/mpindel_summ: src/mpindel_summ.cxx
	$(CXX) $(CFLAGS) src/mpindel_summ.cxx -o $(BIN)/mpindel_summ

$(BIN)/mpindel_parse: src/mpindel_parse.cxx
	 $(CXX) $(CFLAGS) src/mpindel_parse.cxx -o $(BIN)/mpindel_parse

$(BIN)/makepattern: src/makepattern.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/makepattern.cxx zutil.o util.o -o $(BIN)/makepattern

$(BIN)/seqstat: src/seqstat.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/seqstat.cxx zutil.o util.o -o $(BIN)/seqstat

$(BIN)/mutseq: src/mutseq.cxx zutil.o util.o fasta-io.o
	$(CXX) $(CFLAGS) src/mutseq.cxx zutil.o util.o fasta-io.o -o $(BIN)/mutseq

$(BIN)/lowcov: src/lowcov.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/lowcov.cxx zutil.o util.o -o $(BIN)/lowcov

$(BIN)/getreads: src/getreads.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/getreads.cxx zutil.o util.o -o $(BIN)/getreads

$(BIN)/pairing:  src/pairing.cxx zutil.o getComp.o util.o rescue.o map.o fasta-io.o zcompress.o
	$(CXX) $(CFLAGS) src/pairing.cxx  zutil.o getComp.o util.o rescue.o map.o fasta-io.o zcompress.o -lz -o $(BIN)/pairing

$(BIN)/rescue: src/rescuemain.cxx getComp.o rescue.o fasta-io.o zutil.o util.o map.o zcompress.o
	$(CXX) $(CFLAGS) src/rescuemain.cxx rescue.o getComp.o fasta-io.o zutil.o util.o map.o zcompress.o -lz -o $(BIN)/rescue

$(BIN)/remap : rescue.o getComp.o fasta-io.o zutil.o util.o map.o  zcompress.o src/remap.cxx
	$(CXX) $(CFLAGS) src/remap.cxx getComp.o rescue.o fasta-io.o zutil.o util.o map.o zcompress.o -lz -o $(BIN)/remap

$(BIN)/radsort: src/radsort.cxx zutil.o util.o
	$(CXX) $(CFLAGS) src/radsort.cxx zutil.o util.o -o $(BIN)/radsort

$(BIN)/mapreads: src/mapreads.cxx zutil.o util.o fasta-io.o zcompress.o
	$(CXX) $(CFLAGS) src/mapreads.cxx zutil.o util.o fasta-io.o zcompress.o -o $(BIN)/mapreads -lz

$(BIN)/checkpattern: src/checkpattern.cxx zutil.o
	$(CXX) $(CFLAGS) src/checkpattern.cxx zutil.o -o $(BIN)/checkpattern

$(BIN)/map: src/map.h map.o zutil.o util.o src/mapmain.cxx fasta-io.o zcompress.o
	$(CXX) $(CFLAGS) src/mapmain.cxx map.o -o $(BIN)/map util.o zutil.o fasta-io.o zcompress.o -lz

$(BIN)/remduphits: src/remduphits.cxx zutil.o zcompress.o
	$(CXX) $(CFLAGS) src/remduphits.cxx -o $(BIN)/remduphits zutil.o zcompress.o -lz

$(BIN)/simu: simu.o fasta-io.o util.o zutil.o src/simu_main.cxx 
	$(CXX) $(CFLAGS) simu.o src/simu_main.cxx util.o fasta-io.o zutil.o -o $(BIN)/simu

$(BIN)/simu_del: simu.o fasta-io.o util.o zutil.o src/FNdel.cxx
	$(CXX) $(CFLAGS) simu.o src/FNdel.cxx util.o fasta-io.o zutil.o -o $(BIN)/simu_del

$(BIN)/miniassem: miniassem.o zutil.o util.o src/mytemplate.h fasta-io.o src/minimain.cxx
	$(CXX) $(CFLAGS) miniassem.o zutil.o util.o fasta-io.o src/minimain.cxx -o $(BIN)/miniassem

simu.o: src/simu.cxx
	$(CXX) $(CFLAGS) -c src/simu.cxx

map.o: src/map.h src/map.cxx
	$(CXX) $(CFLAGS) -c src/map.cxx

getComp.o: src/getComp.cxx src/getComp.h
	$(CXX) $(CFLAGS) -c src/getComp.cxx

fasta-io.o : src/fasta-io.cxx src/fasta-io.h src/util.h src/zutil.h
	$(CXX) $(CFLAGS) -c src/fasta-io.cxx

util.o : src/util.cxx src/util.h
	$(CXX) $(CFLAGS) -c src/util.cxx

zutil.o: src/zutil.cxx src/zutil.h
	$(CXX) $(CFLAGS) -c src/zutil.cxx

rescue.o: src/rescue.cxx src/rescue.h src/map.h
	$(CXX) $(CFLAGS) -c src/rescue.cxx

miniassem.o: src/miniassem.cxx src/miniassem.h
	$(CXX) $(CFLAGS) -c src/miniassem.cxx

zcompress.o: src/zcompress.cxx src/zcompress.h
	$(CXX) $(CFLAGS) -c src/zcompress.cxx

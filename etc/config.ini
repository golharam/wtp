##
#
# Global Config File for WT pipeline.  Modify for your environment.
#
##

## Define the scheduling environment, should be 'pbs', 'lsf' or 'sge'
queue.sys=pbs

## Name of the scheduler queue to use
queue.sys.queue=secondary




## Resource string for the scheduler submission command

PBS Settings
queue.sys.resource.string="nodes=1:ppn=1,mem=${pbs.mem},vmem=${pbs.vmem}"

## LSF Settings
#queue.sys.resource.string="select[mem>${lsf.select.mem} && swp>${lsf.select.swp}] rusage[mem=${lsf.rusage.mem}:swp=${lsf.rusage.swp}]"

## SGE Settings
#queue.sys.resource.string="mem_free=${sge.mem},virtual_free=${sge.vmem}"




## Additional options for the scheduler submission command
queue.sys.options=

## path to a temporary folder local to each compute node
queue.sys.nodes.tmp.dir=/scratch

## max amt RAM that any one job will request (some will request less). We recommend 
## 6.5GB for Human Genome Build 18
wt.max.memory.per.job=6.5GB

## Adjust the calculated memory requirement by multiplying by this value.
wt.memory.requirement.adjustment.factor=1

## Delete intermediate files
wt.delete.intermediate.files=false

## path to the multi fasta file containing the reference nucleotide sequences (must 
## be accessible on compute nodes)
#wt.file.reference=/data/test/reference.fa

## path to the folder where all the files generated by this tool will be found
#wt.output.dir=/home/myself/results/wtp/test/

## Don't submit jobs.
wt.skip.jobs=false

## Exon reference (GFF format).
#wt.exon.reference=/data/test/exonReference.gtf

## Can be one of 'splitting', 'filtering',  'ref_partitioning', 'mapping', 'extension', 
## 'merge'
wt.mapper.task.skip.to=splitting

## Control how the filter is applied.  ONE_OR_MORE means that a read is filtered 
## if either read split is mapped to the filter reference.  BOTH means that a read 
## is filtered if both splits map to the reference.  OFF means no reads are filtered.
wt.mapper.filter.mode=ONE_OR_MORE

## how many mismatches are tolerated in either part of the read sequence when filtering
wt.mapper.filter.mismatches=2

## path to the multi fasta file containing nucleotide sequences that the split reads 
## will be filtered against (must be accessible on compute nodes)
#wt.mapper.filter.file.reference=/data/test/human_filter_reference.fasta

## Number of colors in reads.
wt.mapper.read.length=50

## Mask may be specified with a string of zeroes(0, exclude) and ones(1, include). 
##  Mask may also be specified with a comma separated list of masked positions or 
## position ranges.  Position start at one.  Ranges are of the format <first masked 
## position>..<last masked position>.
wt.mapper.read.mask=46..50

## reads with more than this number of mappings will not be reported in the output 
## file
wt.mapper.max.loci=10

## whether or not to count valid adjacent mismatches as one mismatch, instead of 
## two
wt.mapper.valid.adjacent.mismatches.count.as.one=true

## Whether or not to count alignments to consistent IUB degenerate symbols as a match, 
## instead of as a mismatch
wt.mapper.match.iub=false

## how long should the first part of the read sequence split be (have not yet tested 
## other values)
wt.mapper.split.left.length=25

## how many mismatches are tolerated in the first part of the read sequence when 
## mapping to the reference (increasing this number may significantly decrease performance)
wt.mapper.split.left.mismatches=2

## how long should the last part of the read sequence split be (have not yet tested 
## other values)
wt.mapper.split.right.length=30

## how many mismatches are tolerated in the last part of the read sequence when mapping 
## to the reference (increasing this number may significantly decrease performance)
wt.mapper.split.right.mismatches=2

## minimum score required for an alignment to be reported in the final output file
wt.mapper.score.min=24

## Identifies unique mapping reads. When a read has multiple mappings, it is unique 
## if it has a mapping with a score that exceeds the next highest score by an amount 
## greater than or equal to this value.
wt.mapper.score.uniqueness.gap=4

## path to the multi-fasta file of reads in color space (must be accessible on compute 
## nodes)
#wt.mapper.file.reads=/data/test/maqc.brain.first100kReads.csfasta

## Score penalty for mapping to an known splice junction.
wt.mapper.penalty.known.junction=0

## Score penalty for mapping to a putative splice junction
wt.mapper.penalty.putative.juction=1

## Sorted Max files to use in NTR Finding.
#wt.ntr.finder.max.file=<PATH>/mapping_output/HBR.chr17_6.100k.mixed.sorted.max.merged.filtered.csfasta

## Region of the Genome to analyze.  Format: <seq_id>:<start>-<end>
wt.ntr.finder.genomic.region=

## Trimming Fraction
wt.ntr.finder.trimming.fraction=0.1

## Minimum alignment score
wt.ntr.finder.min.alignment.score=24

## Minimum Overlap for matching TR to exon.
wt.ntr.finder.min.overlap=0.5

## Minimum coverage in the window for identifying NTRs
wt.ntr.finder.min.window.coverage=0.3,0.5,1,4,10,20,40,60

##  Window Sizes for NTR Finding
wt.ntr.finder.min.window.size=25,50,75,100,125,150,200

## GFF files will not be produced when the number of PTRs/megabase of reference sequence 
## exceeds this value.
wt.ntr.finder.max.ptrs.per.megabase=330

## Annotated translated region (ATR) Reference GFF File.
#wt.ntr.finder.file.atr.reference=/data/test/exonReference.gtf

## Refgene input file.
#wt.refgene2gff.file.input.refgene=refGene.txt

## GFF output file.
wt.refgene2gff.file.output.gff=refGene.gtf